;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cffi:define-foreign-library phonon
  (:unix "libphonon.so")
  (:darwin "libphonon.dylib")
  (:cygwin "phonon.dll")
  (t (:default "libphonon")))
(cffi:use-foreign-library phonon)

(in-package :steam-audio)
(defmacro define-constant (name value &optional doc)
  `(defconstant ,name (if (boundp ',name) (symbol-value ',name) ,value)
     ,@(when doc (list doc))))



(define-constant STEAMAUDIO_VERSION_MAJOR 2)

(cl:export 'STEAMAUDIO_VERSION_MAJOR)

(define-constant STEAMAUDIO_VERSION_MINOR 0)

(cl:export 'STEAMAUDIO_VERSION_MINOR)

(define-constant STEAMAUDIO_VERSION_PATCH 17)

(cl:export 'STEAMAUDIO_VERSION_PATCH)

(cffi:defcenum bool
  :false
  :true)

(cl:export 'bool)

(cffi:defcenum error
  :success
  :failure
  :outofmemory
  :initialization)

(cl:export 'error)

(cffi:defcfun ("iplCreateContext" ipl-create-context) error
  (logCallback :pointer)
  (allocateCallback :pointer)
  (freeCallback :pointer)
  (context :pointer))

(cffi:defcfun ("iplDestroyContext" destroy-context) :void
  (context :pointer))

(cffi:defcfun ("iplCleanup" cleanup) :void)

(cffi:defcstruct vector3
  (x :float)
  (y :float)
  (z :float))

(cl:export 'vector3)

(cl:export 'x)
(cl:export 'y)
(cl:export 'z)

(cffi:defcstruct Box
  (minCoordinates vector3)
  (maxCoordinates vector3))

(cl:export 'Box)

(cl:export 'minCoordinates)
(cl:export 'maxCoordinates)

(cffi:defcstruct Sphere
  (center vector3)
  (radius :float))

(cl:export 'Sphere)

(cl:export 'center)
(cl:export 'radius)

(cffi:defcfun ("iplCalculateRelativeDirection" calculate-relative-direction) vector3
  (sourcePosition vector3)
  (listenerPosition vector3)
  (listenerAhead vector3)
  (listenerUp vector3))

(cffi:defcenum compute-device-type
  :cpu
  :gpu
  :any)

(cl:export 'compute-device-type)

(cffi:defcstruct ComputeDeviceFilter
  (type compute-device-type)
  (maxCUsToReserve :int)
  (fractionCUsForIRUpdate :float))

(cl:export 'ComputeDeviceFilter)

(cl:export 'type)
(cl:export 'maxCUsToReserve)
(cl:export 'fractionCUsForIRUpdate)

(cffi:defcfun ("iplCreateComputeDevice" create-compute-device) error
  (context :pointer)
  (deviceFilter ComputeDeviceFilter)
  (device :pointer))

(cffi:defcfun ("iplDestroyComputeDevice" destroy-compute-device) :void
  (device :pointer))

(cffi:defcenum SceneType
  :phonon
  :embree
  :radeonrays
  :custom)

(cl:export 'SceneType)

(cffi:defcenum SimulationType
  :realtime
  :baked)

(cl:export 'SimulationType)

(cffi:defcstruct SimulationSettings
  (sceneType SceneType)
  (numOcclusionSamples :int)
  (numRays :int)
  (numDiffuseSamples :int)
  (numBounces :int)
  (numThreads :int)
  (irDuration :float)
  (ambisonicsOrder :int)
  (maxConvolutionSources :int)
  (bakingBatchSize :int)
  (irradianceMinDistance :float))

(cl:export 'simulationSettings)

(cl:export 'sceneType)
(cl:export 'numOcclusionSamples)
(cl:export 'numRays)
(cl:export 'numDiffuseSamples)
(cl:export 'numBounces)
(cl:export 'numThreads)
(cl:export 'irDuration)
(cl:export 'ambisonicsOrder)
(cl:export 'maxConvolutionSources)
(cl:export 'bakingBatchSize)
(cl:export 'irradianceMinDistance)

(cffi:defcstruct Triangle
  (indices :pointer :count 3))

(cl:export 'Triangle)

(cl:export 'indices)

(cffi:defcstruct Material
  (lowFreqAbsorption :float)
  (midFreqAbsorption :float)
  (highFreqAbsorption :float)
  (scattering :float)
  (lowFreqTransmission :float)
  (midFreqTransmission :float)
  (highFreqTransmission :float))

(cl:export 'Material)

(cl:export 'lowFreqAbsorption)
(cl:export 'midFreqAbsorption)
(cl:export 'highFreqAbsorption)
(cl:export 'scattering)
(cl:export 'lowFreqTransmission)
(cl:export 'midFreqTransmission)
(cl:export 'highFreqTransmission)

(cffi:defcfun ("iplCreateScene" create-scene) error
  (context :pointer)
  (computeDevice :pointer)
  (simulationSettings SimulationSettings)
  (numMaterials :int)
  (materials :pointer)
  (closestHitCallback :pointer)
  (anyHitCallback :pointer)
  (batchedClosestHitCallback :pointer)
  (batchedAnyHitCallback :pointer)
  (userData :pointer)
  (scene :pointer))

(cffi:defcfun ("iplDestroyScene" destroy-scene) :void
  (scene :pointer))

(cffi:defcfun ("iplCreateStaticMesh" create-static-mesh) error
  (scene :pointer)
  (numVertices :int)
  (numTriangles :int)
  (vertices :pointer)
  (triangles :pointer)
  (materialIndices :pointer)
  (staticMesh :pointer))

(cffi:defcfun ("iplDestroyStaticMesh" destroy-static-mesh) :void
  (staticMesh :pointer))

(cffi:defcfun ("iplSaveScene" save-scene) :int
  (scene :pointer)
  (data :pointer))

(cffi:defcfun ("iplLoadScene" load-scene) error
  (context :pointer)
  (simulationSettings SimulationSettings)
  (data :pointer)
  (size :int)
  (computeDevice :pointer)
  (progressCallback :pointer)
  (scene :pointer))

(cffi:defcfun ("iplSaveSceneAsObj" save-scene-as-obj) :void
  (scene :pointer)
  (fileBaseName :string))

(cffi:defcstruct Matrix4x4
  (elements :pointer))

(cl:export 'Matrix4x4)

(cl:export 'elements)

(cffi:defcfun ("iplCreateInstancedMesh" create-instanced-mesh) error
  (scene :pointer)
  (instancedScene :pointer)
  (transform Matrix4x4)
  (instancedMesh :pointer))

(cffi:defcfun ("iplDestroyInstancedMesh" destroy-instanced-mesh) :void
  (instancedMesh :pointer))

(cffi:defcfun ("iplAddInstancedMesh" add-instanced-mesh) :void
  (scene :pointer)
  (instancedMesh :pointer))

(cffi:defcfun ("iplRemoveInstancedMesh" remove-instanced-mesh) :void
  (scene :pointer)
  (instancedMesh :pointer))

(cffi:defcfun ("iplUpdateInstancedMeshTransform" update-instanced-mesh-transform) :void
  (instancedMesh :pointer)
  (transform Matrix4x4))

(cffi:defcfun ("iplCommitScene" commit-scene) :void
  (scene :pointer))

(cffi:defcfun ("iplCreateEnvironment" create-environment) error
  (context :pointer)
  (computeDevice :pointer)
  (simulationSettings SimulationSettings)
  (scene :pointer)
  (probeManager :pointer)
  (environment :pointer))

(cffi:defcfun ("iplDestroyEnvironment" destroy-environment) :void
  (environment :pointer))

(cffi:defcfun ("iplSetNumBounces" set-num-bounces) :void
  (environment :pointer)
  (numBounces :int))

(cffi:defcenum ConvolutionType
  :phonon
  :trueaudionext)

(cl:export 'ConvolutionType)

(cffi:defcstruct RenderingSettings
  (samplingRate :int)
  (frameSize :int)
  (convolutionType ConvolutionType))

(cl:export 'RenderingSettings)

(cl:export 'samplingRate)
(cl:export 'frameSize)
(cl:export 'convolutionType)

(cffi:defcenum ChannelLayoutType
  :speakers
  :ambisonics)

(cl:export 'ChannelLayoutType)

(cffi:defcenum ChannelLayout
  :mono
  :stereo
  :quadraphonic
  :fivepointone
  :sevenpointone
  :custom)

(cl:export 'ChannelLayout)

(cffi:defcenum AmbisonicsOrdering
  :fursemalham
  :acn)

(cl:export 'AmbisonicsOrdering)

(cffi:defcenum AmbisonicsNormalization
  :fursemalham
  :sn3d
  :n3d)

(cl:export 'AmbisonicsNormalization)

(cffi:defcenum ChannelOrder
  :interleaved
  :deinterleaved)

(cl:export 'ChannelOrder)

(cffi:defcstruct AudioFormat
  (channelLayoutType ChannelLayoutType)
  (channelLayout ChannelLayout)
  (numSpeakers :int)
  (speakerDirections :pointer)
  (ambisonicsOrder :int)
  (ambisonicsOrdering AmbisonicsOrdering)
  (ambisonicsNormalization AmbisonicsNormalization)
  (channelOrder ChannelOrder))

(cl:export 'AudioFormat)

(cl:export 'channelLayoutType)
(cl:export 'channelLayout)
(cl:export 'numSpeakers)
(cl:export 'speakerDirections)
(cl:export 'ambisonicsOrder)
(cl:export 'ambisonicsOrdering)
(cl:export 'ambisonicsNormalization)
(cl:export 'channelOrder)

(cffi:defcstruct AudioBuffer
  (format AudioFormat)
  (numSamples :int)
  (interleavedBuffer :pointer)
  (deinterleavedBuffer :pointer))

(cl:export 'AudioBuffer)

(cl:export 'format)
(cl:export 'numSamples)
(cl:export 'interleavedBuffer)
(cl:export 'deinterleavedBuffer)

(cffi:defcfun ("iplMixAudioBuffers" mix-audio-buffers) :void
  (numBuffers :int)
  (inputAudio :pointer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplInterleaveAudioBuffer" interleave-audio-buffer) :void
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplDeinterleaveAudioBuffer" deinterleave-audio-buffer) :void
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplConvertAudioBufferFormat" convert-audio-buffer-format) :void
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplCreateAmbisonicsRotator" create-ambisonics-rotator) error
  (context :pointer)
  (order :int)
  (rotator :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsRotator" destroy-ambisonics-rotator) :void
  (rotator :pointer))

(cffi:defcfun ("iplSetAmbisonicsRotation" set-ambisonics-rotation) :void
  (rotator :pointer)
  (listenerAhead vector3)
  (listenerUp vector3))

(cffi:defcfun ("iplRotateAmbisonicsAudioBuffer" rotate-ambisonics-audio-buffer) :void
  (rotator :pointer)
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcenum HrtfDatabaseType
  :default
  :sofa)

(cl:export 'HrtfDatabaseType)

(cffi:defcstruct HrtfParams
  (type HrtfDatabaseType)
  (hrtfData :pointer)
  (sofaFileName :string))

(cl:export 'HrtfParams)

(cl:export 'type)
(cl:export 'hrtfData)
(cl:export 'sofaFileName)

(cffi:defcfun ("iplCreateBinauralRenderer" create-binaural-renderer) error
  (context :pointer)
  (renderingSettings RenderingSettings)
  (params HrtfParams)
  (renderer :pointer))

(cffi:defcfun ("iplDestroyBinauralRenderer" destroy-binaural-renderer) :void
  (renderer :pointer))

(cffi:defcfun ("iplCreatePanningEffect" create-panning-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyPanningEffect" destroy-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyPanningEffect" apply-panning-effect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (direction vector3)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplFlushPanningEffect" flush-panning-effect) :void
  (effect :pointer))

(cffi:defcenum HrtfInterpolation
  :nearest
  :bilinear)

(cl:export 'HrtfInterpolation)

(cffi:defcfun ("iplCreateBinauralEffect" create-binaural-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyBinauralEffect" destroy-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyBinauralEffect" apply-binaural-effect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (direction vector3)
  (interpolation HrtfInterpolation)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplApplyBinauralEffectWithParameters" apply-binaural-effect-with-parameters) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (direction vector3)
  (interpolation HrtfInterpolation)
  (outputAudio AudioBuffer)
  (leftDelay :pointer)
  (rightDelay :pointer))

(cffi:defcfun ("iplFlushBinauralEffect" flush-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateVirtualSurroundEffect" create-virtual-surround-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyVirtualSurroundEffect" destroy-virtual-surround-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyVirtualSurroundEffect" apply-virtual-surround-effect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplFlushVirtualSurroundEffect" flush-virtual-surround-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateAmbisonicsPanningEffect" create-ambisonics-panning-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsPanningEffect" destroy-ambisonics-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyAmbisonicsPanningEffect" apply-ambisonics-panning-effect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplFlushAmbisonicsPanningEffect" flush-ambisonics-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateAmbisonicsBinauralEffect" create-ambisonics-binaural-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsBinauralEffect" destroy-ambisonics-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyAmbisonicsBinauralEffect" apply-ambisonics-binaural-effect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio AudioBuffer)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplFlushAmbisonicsBinauralEffect" flush-ambisonics-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateEnvironmentalRenderer" create-environmental-renderer) error
  (context :pointer)
  (environment :pointer)
  (renderingSettings RenderingSettings)
  (outputFormat AudioFormat)
  (threadCreateCallback :pointer)
  (threadDestroyCallback :pointer)
  (renderer :pointer))

(cffi:defcfun ("iplDestroyEnvironmentalRenderer" destroy-environmental-renderer) :void
  (renderer :pointer))

(cffi:defcfun ("iplGetEnvironmentForRenderer" get-environment-for-renderer) :pointer
  (renderer :pointer))

(cffi:defcenum DirectOcclusionMethod
  :raycast
  :volumetric)

(cl:export 'DirectOcclusionMethod)

(cffi:defcenum DirectOcclusionMode
  :none
  :notransmission
  :transmissionbyvolume
  :transmissionbyfrequency)

(cl:export 'DirectOcclusionMode)

(cffi:defcstruct DirectSoundPath
  (direction vector3)
  (distanceAttenuation :float)
  (airAbsorption :pointer :count 3)
  (propagationDelay :float)
  (occlusionFactor :float)
  (transmissionFactor :pointer :count 3)
  (directivityFactor :float))

(cl:export 'DirectSoundPath)

(cl:export 'direction)
(cl:export 'distanceAttenuation)
(cl:export 'airAbsorption)
(cl:export 'propagationDelay)
(cl:export 'occlusionFactor)
(cl:export 'transmissionFactor)
(cl:export 'directivityFactor)

(cffi:defcstruct Directivity
  (dipoleWeight :float)
  (dipolePower :float)
  (callback :pointer)
  (userData :pointer))

(cl:export 'Directivity)

(cl:export 'dipoleWeight)
(cl:export 'dipolePower)
(cl:export 'callback)
(cl:export 'userData)

(cffi:defcstruct Source
  (position vector3)
  (ahead vector3)
  (up vector3)
  (right vector3)
  (directivity Directivity))

(cl:export 'Source)

(cl:export 'position)
(cl:export 'ahead)
(cl:export 'up)
(cl:export 'right)
(cl:export 'directivity)

(cffi:defcfun ("iplGetDirectSoundPath" get-direct-sound-path) DirectSoundPath
  (environment :pointer)
  (listenerPosition vector3)
  (listenerAhead vector3)
  (listenerUp vector3)
  (source Source)
  (sourceRadius :float)
  (occlusionMode DirectOcclusionMode)
  (occlusionMethod DirectOcclusionMethod))

(cffi:defcstruct DirectSoundEffectOptions
  (applyDistanceAttenuation bool)
  (applyAirAbsorption bool)
  (applyDirectivity bool)
  (directOcclusionMode DirectOcclusionMode))

(cl:export 'DirectSoundEffectOptions)

(cl:export 'applyDistanceAttenuation)
(cl:export 'applyAirAbsorption)
(cl:export 'applyDirectivity)
(cl:export 'directOcclusionMode)

(cffi:defcfun ("iplCreateDirectSoundEffect" create-direct-sound-effect) error
  (renderer :pointer)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyDirectSoundEffect" destroy-direct-sound-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyDirectSoundEffect" apply-direct-sound-effect) :void
  (effect :pointer)
  (inputAudio AudioBuffer)
  (directSoundPath DirectSoundPath)
  (options DirectSoundEffectOptions)
  (outputAudio AudioBuffer))

(cffi:defcfun ("iplFlushDirectSoundEffect" flush-direct-sound-effect) :void
  (effect :pointer))

(cffi:defcenum BakedDataType
  :staticsource
  :staticlistener
  :reverb)

(cl:export 'BakedDataType)

(cffi:defcstruct BakedDataIdentifier
  (identifier :int)
  (type BakedDataType))

(cl:export 'BakedDataIdentifier)

(cl:export 'identifier)
(cl:export 'type)

(cffi:defcfun ("iplCreateConvolutionEffect" create-convolution-effect) error
  (renderer :pointer)
  (identifier BakedDataIdentifier)
  (simulationType SimulationType)
  (inputFormat AudioFormat)
  (outputFormat AudioFormat)
  (effect :pointer))

(cffi:defcfun ("iplDestroyConvolutionEffect" destroy-convolution-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplSetConvolutionEffectIdentifier" set-convolution-effect-identifier) :void
  (effect :pointer)
  (identifier BakedDataIdentifier))

(cffi:defcfun ("iplSetDryAudioForConvolutionEffect" set-dry-audio-for-convolution-effect) :void
  (effect :pointer)
  (source Source)
  (dryAudio AudioBuffer))

(cffi:defcfun ("iplGetWetAudioForConvolutionEffect" get-wet-audio-for-convolution-effect) :void
  (effect :pointer)
  (listenerPosition vector3)
  (listenerAhead vector3)
  (listenerUp vector3)
  (wetAudio AudioBuffer))

(cffi:defcfun ("iplGetMixedEnvironmentalAudio" get-mixed-environmental-audio) :void
  (renderer :pointer)
  (listenerPosition vector3)
  (listenerAhead vector3)
  (listenerUp vector3)
  (mixedWetAudio AudioBuffer))

(cffi:defcfun ("iplFlushConvolutionEffect" flush-convolution-effect) :void
  (effect :pointer))

(cffi:defcenum ProbePlacement
  :centroid
  :octree
  :uniformfloor)

(cl:export 'ProbePlacement)

(cffi:defcstruct ProbePlacementParams
  (placement ProbePlacement)
  (spacing :float)
  (heightAboveFloor :float)
  (maxOctreeTriangles :int)
  (maxOctreeDepth :int))

(cl:export 'ProbePlacementParams)

(cl:export 'placement)
(cl:export 'spacing)
(cl:export 'heightAboveFloor)
(cl:export 'maxOctreeTriangles)
(cl:export 'maxOctreeDepth)

(cffi:defcfun ("iplCreateProbeBox" create-probe-box) error
  (context :pointer)
  (scene :pointer)
  (boxLocalToWorldTransform :pointer)
  (placementParams ProbePlacementParams)
  (progressCallback :pointer)
  (probeBox :pointer))

(cffi:defcfun ("iplDestroyProbeBox" destroy-probe-box) :void
  (probeBox :pointer))

(cffi:defcfun ("iplGetProbeSpheres" get-probe-spheres) :int
  (probeBox :pointer)
  (probeSpheres :pointer))

(cffi:defcfun ("iplSaveProbeBox" save-probe-box) :int
  (probeBox :pointer)
  (data :pointer))

(cffi:defcfun ("iplLoadProbeBox" load-probe-box) error
  (context :pointer)
  (data :pointer)
  (size :int)
  (probeBox :pointer))

(cffi:defcfun ("iplCreateProbeBatch" create-probe-batch) error
  (context :pointer)
  (probeBatch :pointer))

(cffi:defcfun ("iplDestroyProbeBatch" destroy-probe-batch) :void
  (probeBatch :pointer))

(cffi:defcfun ("iplAddProbeToBatch" add-probe-to-batch) :void
  (probeBatch :pointer)
  (probeBox :pointer)
  (probeIndex :int))

(cffi:defcfun ("iplFinalizeProbeBatch" finalize-probe-batch) :void
  (probeBatch :pointer))

(cffi:defcfun ("iplSaveProbeBatch" save-probe-batch) :int
  (probeBatch :pointer)
  (data :pointer))

(cffi:defcfun ("iplLoadProbeBatch" load-probe-batch) error
  (context :pointer)
  (data :pointer)
  (size :int)
  (probeBatch :pointer))

(cffi:defcfun ("iplCreateProbeManager" create-probe-manager) error
  (context :pointer)
  (probeManager :pointer))

(cffi:defcfun ("iplDestroyProbeManager" destroy-probe-manager) :void
  (probeManager :pointer))

(cffi:defcfun ("iplAddProbeBatch" add-probe-batch) :void
  (probeManager :pointer)
  (probeBatch :pointer))

(cffi:defcfun ("iplRemoveProbeBatch" remove-probe-batch) :void
  (probeManager :pointer)
  (probeBatch :pointer))

(cffi:defcstruct BakingSettings
  (bakeParametric bool)
  (bakeConvolution bool))

(cl:export 'BakingSettings)

(cl:export 'bakeParametric)
(cl:export 'bakeConvolution)

(cffi:defcfun ("iplBakeReverb" bake-reverb) :void
  (environment :pointer)
  (probeBox :pointer)
  (bakingSettings BakingSettings)
  (progressCallback :pointer))

(cffi:defcfun ("iplBakePropagation" bake-propagation) :void
  (environment :pointer)
  (probeBox :pointer)
  (sourceInfluence Sphere)
  (sourceIdentifier BakedDataIdentifier)
  (bakingSettings BakingSettings)
  (progressCallback :pointer))

(cffi:defcfun ("iplBakeStaticListener" bake-static-listener) :void
  (environment :pointer)
  (probeBox :pointer)
  (listenerInfluence Sphere)
  (listenerIdentifier BakedDataIdentifier)
  (bakingSettings BakingSettings)
  (progressCallback :pointer))

(cffi:defcfun ("iplCancelBake" cancel-bake) :void)

(cffi:defcfun ("iplDeleteBakedDataByIdentifier" delete-baked-data-by-identifier) :void
  (probeBox :pointer)
  (identifier BakedDataIdentifier))

(cffi:defcfun ("iplGetBakedDataSizeByIdentifier" get-baked-data-size-by-identifier) :int
  (probeBox :pointer)
  (identifier BakedDataIdentifier))
