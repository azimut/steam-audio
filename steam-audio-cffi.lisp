;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cffi:load-foreign-library "libphonon.so")
(in-package :steam-audio)
(defmacro define-constant (name value &optional doc)
  `(defconstant ,name (if (boundp ',name) (symbol-value ',name) ,value)
     ,@(when doc (list doc))))



(define-constant STEAMAUDIO_VERSION_MAJOR 2)

(cl:export 'STEAMAUDIO_VERSION_MAJOR)

(define-constant STEAMAUDIO_VERSION_MINOR 0)

(cl:export 'STEAMAUDIO_VERSION_MINOR)

(define-constant STEAMAUDIO_VERSION_PATCH 17)

(cl:export 'STEAMAUDIO_VERSION_PATCH)

(cffi:defcenum IPLbool
  :ipl-false
  :ipl-true)

(cl:export 'IPLbool)

(cffi:defcenum IPLerror
  :ipl-status-success
  :ipl-status-failure
  :ipl-status-outofmemory
  :ipl-status-initialization)

(cl:export 'IPLerror)

(cffi:defcfun ("iplCreateContext" iplCreateContext) IPLerror
  (logCallback :pointer)
  (allocateCallback :pointer)
  (freeCallback :pointer)
  (context :pointer))

(cl:export 'iplCreateContext)

(cffi:defcfun ("iplDestroyContext" iplDestroyContext) :void
  (context :pointer))

(cl:export 'iplDestroyContext)

(cffi:defcfun ("iplCleanup" iplCleanup) :void)

(cl:export 'iplCleanup)

(cffi:defcstruct IPLVector3
    (x :float)
  (y :float)
  (z :float))

(cl:export 'IPLVector3)

(cl:export 'x)

(cl:export 'y)

(cl:export 'z)

(cffi:defcstruct IPLBox
    (minCoordinates IPLVector3)
  (maxCoordinates IPLVector3))

(cl:export 'IPLBox)

(cl:export 'minCoordinates)

(cl:export 'maxCoordinates)

(cffi:defcstruct IPLSphere
    (center IPLVector3)
  (radius :float))

(cl:export 'IPLSphere)

(cl:export 'center)

(cl:export 'radius)

(cffi:defcfun ("iplCalculateRelativeDirection" iplCalculateRelativeDirection) IPLVector3
  (sourcePosition IPLVector3)
  (listenerPosition IPLVector3)
  (listenerAhead IPLVector3)
  (listenerUp IPLVector3))

(cl:export 'iplCalculateRelativeDirection)

(cffi:defcenum IPLComputeDeviceType
  :ipl-computedevice-cpu
  :ipl-computedevice-gpu
  :ipl-computedevice-any)

(cl:export 'IPLComputeDeviceType)

(cffi:defcstruct IPLComputeDeviceFilter
    (type IPLComputeDeviceType)
  (maxCUsToReserve :int)
  (fractionCUsForIRUpdate :float))

(cl:export 'IPLComputeDeviceFilter)

(cl:export 'type)

(cl:export 'maxCUsToReserve)

(cl:export 'fractionCUsForIRUpdate)

(cffi:defcfun ("iplCreateComputeDevice" iplCreateComputeDevice) IPLerror
  (context :pointer)
  (deviceFilter IPLComputeDeviceFilter)
  (device :pointer))

(cl:export 'iplCreateComputeDevice)

(cffi:defcfun ("iplDestroyComputeDevice" iplDestroyComputeDevice) :void
  (device :pointer))

(cl:export 'iplDestroyComputeDevice)

(cffi:defcenum IPLSceneType
  :ipl-scenetype-phonon
  :ipl-scenetype-embree
  :ipl-scenetype-radeonrays
  :ipl-scenetype-custom)

(cl:export 'IPLSceneType)

(cffi:defcenum IPLSimulationType
  :ipl-simtype-realtime
  :ipl-simtype-baked)

(cl:export 'IPLSimulationType)

(cffi:defcstruct IPLSimulationSettings
    (sceneType IPLSceneType)
  (numOcclusionSamples :int)
  (numRays :int)
  (numDiffuseSamples :int)
  (numBounces :int)
  (numThreads :int)
  (irDuration :float)
  (ambisonicsOrder :int)
  (maxConvolutionSources :int)
  (bakingBatchSize :int)
  (irradianceMinDistance :float))

(cl:export 'IPLSimulationSettings)

(cl:export 'sceneType)

(cl:export 'numOcclusionSamples)

(cl:export 'numRays)

(cl:export 'numDiffuseSamples)

(cl:export 'numBounces)

(cl:export 'numThreads)

(cl:export 'irDuration)

(cl:export 'ambisonicsOrder)

(cl:export 'maxConvolutionSources)

(cl:export 'bakingBatchSize)

(cl:export 'irradianceMinDistance)

(cffi:defcstruct IPLTriangle
    (indices :pointer :count 3))

(cl:export 'IPLTriangle)

(cl:export 'indices)

(cffi:defcstruct IPLMaterial
    (lowFreqAbsorption :float)
  (midFreqAbsorption :float)
  (highFreqAbsorption :float)
  (scattering :float)
  (lowFreqTransmission :float)
  (midFreqTransmission :float)
  (highFreqTransmission :float))

(cl:export 'IPLMaterial)

(cl:export 'lowFreqAbsorption)

(cl:export 'midFreqAbsorption)

(cl:export 'highFreqAbsorption)

(cl:export 'scattering)

(cl:export 'lowFreqTransmission)

(cl:export 'midFreqTransmission)

(cl:export 'highFreqTransmission)

(cffi:defcfun ("iplCreateScene" iplCreateScene) IPLerror
  (context :pointer)
  (computeDevice :pointer)
  (simulationSettings IPLSimulationSettings)
  (numMaterials :int)
  (materials :pointer)
  (closestHitCallback :pointer)
  (anyHitCallback :pointer)
  (batchedClosestHitCallback :pointer)
  (batchedAnyHitCallback :pointer)
  (userData :pointer)
  (scene :pointer))

(cl:export 'iplCreateScene)

(cffi:defcfun ("iplDestroyScene" iplDestroyScene) :void
  (scene :pointer))

(cl:export 'iplDestroyScene)

(cffi:defcfun ("iplCreateStaticMesh" iplCreateStaticMesh) IPLerror
  (scene :pointer)
  (numVertices :int)
  (numTriangles :int)
  (vertices :pointer)
  (triangles :pointer)
  (materialIndices :pointer)
  (staticMesh :pointer))

(cl:export 'iplCreateStaticMesh)

(cffi:defcfun ("iplDestroyStaticMesh" iplDestroyStaticMesh) :void
  (staticMesh :pointer))

(cl:export 'iplDestroyStaticMesh)

(cffi:defcfun ("iplSaveScene" iplSaveScene) :int
  (scene :pointer)
  (data :pointer))

(cl:export 'iplSaveScene)

(cffi:defcfun ("iplLoadScene" iplLoadScene) IPLerror
  (context :pointer)
  (simulationSettings IPLSimulationSettings)
  (data :pointer)
  (size :int)
  (computeDevice :pointer)
  (progressCallback :pointer)
  (scene :pointer))

(cl:export 'iplLoadScene)

(cffi:defcfun ("iplSaveSceneAsObj" iplSaveSceneAsObj) :void
  (scene :pointer)
  (fileBaseName :string))

(cl:export 'iplSaveSceneAsObj)

(cffi:defcstruct IPLMatrix4x4
    (elements :pointer))

(cl:export 'IPLMatrix4x4)

(cl:export 'elements)

(cffi:defcfun ("iplCreateInstancedMesh" iplCreateInstancedMesh) IPLerror
  (scene :pointer)
  (instancedScene :pointer)
  (transform IPLMatrix4x4)
  (instancedMesh :pointer))

(cl:export 'iplCreateInstancedMesh)

(cffi:defcfun ("iplDestroyInstancedMesh" iplDestroyInstancedMesh) :void
  (instancedMesh :pointer))

(cl:export 'iplDestroyInstancedMesh)

(cffi:defcfun ("iplAddInstancedMesh" iplAddInstancedMesh) :void
  (scene :pointer)
  (instancedMesh :pointer))

(cl:export 'iplAddInstancedMesh)

(cffi:defcfun ("iplRemoveInstancedMesh" iplRemoveInstancedMesh) :void
  (scene :pointer)
  (instancedMesh :pointer))

(cl:export 'iplRemoveInstancedMesh)

(cffi:defcfun ("iplUpdateInstancedMeshTransform" iplUpdateInstancedMeshTransform) :void
  (instancedMesh :pointer)
  (transform IPLMatrix4x4))

(cl:export 'iplUpdateInstancedMeshTransform)

(cffi:defcfun ("iplCommitScene" iplCommitScene) :void
  (scene :pointer))

(cl:export 'iplCommitScene)

(cffi:defcfun ("iplCreateEnvironment" iplCreateEnvironment) IPLerror
  (context :pointer)
  (computeDevice :pointer)
  (simulationSettings IPLSimulationSettings)
  (scene :pointer)
  (probeManager :pointer)
  (environment :pointer))

(cl:export 'iplCreateEnvironment)

(cffi:defcfun ("iplDestroyEnvironment" iplDestroyEnvironment) :void
  (environment :pointer))

(cl:export 'iplDestroyEnvironment)

(cffi:defcfun ("iplSetNumBounces" iplSetNumBounces) :void
  (environment :pointer)
  (numBounces :int))

(cl:export 'iplSetNumBounces)

(cffi:defcenum IPLConvolutionType
  :ipl-convolutiontype-phonon
  :ipl-convolutiontype-trueaudionext)

(cl:export 'IPLConvolutionType)

(cffi:defcstruct IPLRenderingSettings
    (samplingRate :int)
  (frameSize :int)
  (convolutionType IPLConvolutionType))

(cl:export 'IPLRenderingSettings)

(cl:export 'samplingRate)

(cl:export 'frameSize)

(cl:export 'convolutionType)

(cffi:defcenum IPLChannelLayoutType
  :ipl-channellayouttype-speakers
  :ipl-channellayouttype-ambisonics)

(cl:export 'IPLChannelLayoutType)

(cffi:defcenum IPLChannelLayout
  :ipl-channellayout-mono
  :ipl-channellayout-stereo
  :ipl-channellayout-quadraphonic
  :ipl-channellayout-fivepointone
  :ipl-channellayout-sevenpointone
  :ipl-channellayout-custom)

(cl:export 'IPLChannelLayout)

(cffi:defcenum IPLAmbisonicsOrdering
  :ipl-ambisonicsordering-fursemalham
  :ipl-ambisonicsordering-acn)

(cl:export 'IPLAmbisonicsOrdering)

(cffi:defcenum IPLAmbisonicsNormalization
  :ipl-ambisonicsnormalization-fursemalham
  :ipl-ambisonicsnormalization-sn3d
  :ipl-ambisonicsnormalization-n3d)

(cl:export 'IPLAmbisonicsNormalization)

(cffi:defcenum IPLChannelOrder
  :ipl-channelorder-interleaved
  :ipl-channelorder-deinterleaved)

(cl:export 'IPLChannelOrder)

(cffi:defcstruct IPLAudioFormat
    (channelLayoutType IPLChannelLayoutType)
  (channelLayout IPLChannelLayout)
  (numSpeakers :int)
  (speakerDirections :pointer)
  (ambisonicsOrder :int)
  (ambisonicsOrdering IPLAmbisonicsOrdering)
  (ambisonicsNormalization IPLAmbisonicsNormalization)
  (channelOrder IPLChannelOrder))

(cl:export 'IPLAudioFormat)

(cl:export 'channelLayoutType)

(cl:export 'channelLayout)

(cl:export 'numSpeakers)

(cl:export 'speakerDirections)

(cl:export 'ambisonicsOrder)

(cl:export 'ambisonicsOrdering)

(cl:export 'ambisonicsNormalization)

(cl:export 'channelOrder)

(cffi:defcstruct IPLAudioBuffer
    (format IPLAudioFormat)
  (numSamples :int)
  (interleavedBuffer :pointer)
  (deinterleavedBuffer :pointer))

(cl:export 'IPLAudioBuffer)

(cl:export 'format)

(cl:export 'numSamples)

(cl:export 'interleavedBuffer)

(cl:export 'deinterleavedBuffer)

(cffi:defcfun ("iplMixAudioBuffers" iplMixAudioBuffers) :void
  (numBuffers :int)
  (inputAudio :pointer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplMixAudioBuffers)

(cffi:defcfun ("iplInterleaveAudioBuffer" iplInterleaveAudioBuffer) :void
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplInterleaveAudioBuffer)

(cffi:defcfun ("iplDeinterleaveAudioBuffer" iplDeinterleaveAudioBuffer) :void
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplDeinterleaveAudioBuffer)

(cffi:defcfun ("iplConvertAudioBufferFormat" iplConvertAudioBufferFormat) :void
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplConvertAudioBufferFormat)

(cffi:defcfun ("iplCreateAmbisonicsRotator" iplCreateAmbisonicsRotator) IPLerror
  (context :pointer)
  (order :int)
  (rotator :pointer))

(cl:export 'iplCreateAmbisonicsRotator)

(cffi:defcfun ("iplDestroyAmbisonicsRotator" iplDestroyAmbisonicsRotator) :void
  (rotator :pointer))

(cl:export 'iplDestroyAmbisonicsRotator)

(cffi:defcfun ("iplSetAmbisonicsRotation" iplSetAmbisonicsRotation) :void
  (rotator :pointer)
  (listenerAhead IPLVector3)
  (listenerUp IPLVector3))

(cl:export 'iplSetAmbisonicsRotation)

(cffi:defcfun ("iplRotateAmbisonicsAudioBuffer" iplRotateAmbisonicsAudioBuffer) :void
  (rotator :pointer)
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplRotateAmbisonicsAudioBuffer)

(cffi:defcenum IPLHrtfDatabaseType
  :ipl-hrtfdatabasetype-default
  :ipl-hrtfdatabasetype-sofa)

(cl:export 'IPLHrtfDatabaseType)

(cffi:defcstruct IPLHrtfParams
    (type IPLHrtfDatabaseType)
  (hrtfData :pointer)
  (sofaFileName :string))

(cl:export 'IPLHrtfParams)

(cl:export 'type)

(cl:export 'hrtfData)

(cl:export 'sofaFileName)

(cffi:defcfun ("iplCreateBinauralRenderer" iplCreateBinauralRenderer) IPLerror
  (context :pointer)
  (renderingSettings IPLRenderingSettings)
  (params IPLHrtfParams)
  (renderer :pointer))

(cl:export 'iplCreateBinauralRenderer)

(cffi:defcfun ("iplDestroyBinauralRenderer" iplDestroyBinauralRenderer) :void
  (renderer :pointer))

(cl:export 'iplDestroyBinauralRenderer)

(cffi:defcfun ("iplCreatePanningEffect" iplCreatePanningEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreatePanningEffect)

(cffi:defcfun ("iplDestroyPanningEffect" iplDestroyPanningEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyPanningEffect)

(cffi:defcfun ("iplApplyPanningEffect" iplApplyPanningEffect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (direction IPLVector3)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyPanningEffect)

(cffi:defcfun ("iplFlushPanningEffect" iplFlushPanningEffect) :void
  (effect :pointer))

(cl:export 'iplFlushPanningEffect)

(cffi:defcenum IPLHrtfInterpolation
  :ipl-hrtfinterpolation-nearest
  :ipl-hrtfinterpolation-bilinear)

(cl:export 'IPLHrtfInterpolation)

(cffi:defcfun ("iplCreateBinauralEffect" iplCreateBinauralEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateBinauralEffect)

(cffi:defcfun ("iplDestroyBinauralEffect" iplDestroyBinauralEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyBinauralEffect)

(cffi:defcfun ("iplApplyBinauralEffect" iplApplyBinauralEffect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (direction IPLVector3)
  (interpolation IPLHrtfInterpolation)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyBinauralEffect)

(cffi:defcfun ("iplApplyBinauralEffectWithParameters" iplApplyBinauralEffectWithParameters) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (direction IPLVector3)
  (interpolation IPLHrtfInterpolation)
  (outputAudio IPLAudioBuffer)
  (leftDelay :pointer)
  (rightDelay :pointer))

(cl:export 'iplApplyBinauralEffectWithParameters)

(cffi:defcfun ("iplFlushBinauralEffect" iplFlushBinauralEffect) :void
  (effect :pointer))

(cl:export 'iplFlushBinauralEffect)

(cffi:defcfun ("iplCreateVirtualSurroundEffect" iplCreateVirtualSurroundEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateVirtualSurroundEffect)

(cffi:defcfun ("iplDestroyVirtualSurroundEffect" iplDestroyVirtualSurroundEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyVirtualSurroundEffect)

(cffi:defcfun ("iplApplyVirtualSurroundEffect" iplApplyVirtualSurroundEffect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyVirtualSurroundEffect)

(cffi:defcfun ("iplFlushVirtualSurroundEffect" iplFlushVirtualSurroundEffect) :void
  (effect :pointer))

(cl:export 'iplFlushVirtualSurroundEffect)

(cffi:defcfun ("iplCreateAmbisonicsPanningEffect" iplCreateAmbisonicsPanningEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateAmbisonicsPanningEffect)

(cffi:defcfun ("iplDestroyAmbisonicsPanningEffect" iplDestroyAmbisonicsPanningEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyAmbisonicsPanningEffect)

(cffi:defcfun ("iplApplyAmbisonicsPanningEffect" iplApplyAmbisonicsPanningEffect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyAmbisonicsPanningEffect)

(cffi:defcfun ("iplFlushAmbisonicsPanningEffect" iplFlushAmbisonicsPanningEffect) :void
  (effect :pointer))

(cl:export 'iplFlushAmbisonicsPanningEffect)

(cffi:defcfun ("iplCreateAmbisonicsBinauralEffect" iplCreateAmbisonicsBinauralEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateAmbisonicsBinauralEffect)

(cffi:defcfun ("iplDestroyAmbisonicsBinauralEffect" iplDestroyAmbisonicsBinauralEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyAmbisonicsBinauralEffect)

(cffi:defcfun ("iplApplyAmbisonicsBinauralEffect" iplApplyAmbisonicsBinauralEffect) :void
  (effect :pointer)
  (binauralRenderer :pointer)
  (inputAudio IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyAmbisonicsBinauralEffect)

(cffi:defcfun ("iplFlushAmbisonicsBinauralEffect" iplFlushAmbisonicsBinauralEffect) :void
  (effect :pointer))

(cl:export 'iplFlushAmbisonicsBinauralEffect)

(cffi:defcfun ("iplCreateEnvironmentalRenderer" iplCreateEnvironmentalRenderer) IPLerror
  (context :pointer)
  (environment :pointer)
  (renderingSettings IPLRenderingSettings)
  (outputFormat IPLAudioFormat)
  (threadCreateCallback :pointer)
  (threadDestroyCallback :pointer)
  (renderer :pointer))

(cl:export 'iplCreateEnvironmentalRenderer)

(cffi:defcfun ("iplDestroyEnvironmentalRenderer" iplDestroyEnvironmentalRenderer) :void
  (renderer :pointer))

(cl:export 'iplDestroyEnvironmentalRenderer)

(cffi:defcfun ("iplGetEnvironmentForRenderer" iplGetEnvironmentForRenderer) :pointer
  (renderer :pointer))

(cl:export 'iplGetEnvironmentForRenderer)

(cffi:defcenum IPLDirectOcclusionMethod
  :ipl-directocclusion-raycast
  :ipl-directocclusion-volumetric)

(cl:export 'IPLDirectOcclusionMethod)

(cffi:defcenum IPLDirectOcclusionMode
  :ipl-directocclusion-none
  :ipl-directocclusion-notransmission
  :ipl-directocclusion-transmissionbyvolume
  :ipl-directocclusion-transmissionbyfrequency)

(cl:export 'IPLDirectOcclusionMode)

(cffi:defcstruct IPLDirectSoundPath
    (direction IPLVector3)
  (distanceAttenuation :float)
  (airAbsorption :pointer :count 3)
  (propagationDelay :float)
  (occlusionFactor :float)
  (transmissionFactor :pointer :count 3)
  (directivityFactor :float))

(cl:export 'IPLDirectSoundPath)

(cl:export 'direction)

(cl:export 'distanceAttenuation)

(cl:export 'airAbsorption)

(cl:export 'propagationDelay)

(cl:export 'occlusionFactor)

(cl:export 'transmissionFactor)

(cl:export 'directivityFactor)

(cffi:defcstruct IPLDirectivity
    (dipoleWeight :float)
  (dipolePower :float)
  (callback :pointer)
  (userData :pointer))

(cl:export 'IPLDirectivity)

(cl:export 'dipoleWeight)

(cl:export 'dipolePower)

(cl:export 'callback)

(cl:export 'userData)

(cffi:defcstruct IPLSource
    (position IPLVector3)
  (ahead IPLVector3)
  (up IPLVector3)
  (right IPLVector3)
  (directivity IPLDirectivity))

(cl:export 'IPLSource)

(cl:export 'position)

(cl:export 'ahead)

(cl:export 'up)

(cl:export 'right)

(cl:export 'directivity)

(cffi:defcfun ("iplGetDirectSoundPath" iplGetDirectSoundPath) IPLDirectSoundPath
  (environment :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead IPLVector3)
  (listenerUp IPLVector3)
  (source IPLSource)
  (sourceRadius :float)
  (occlusionMode IPLDirectOcclusionMode)
  (occlusionMethod IPLDirectOcclusionMethod))

(cl:export 'iplGetDirectSoundPath)

(cffi:defcstruct IPLDirectSoundEffectOptions
    (applyDistanceAttenuation IPLbool)
  (applyAirAbsorption IPLbool)
  (applyDirectivity IPLbool)
  (directOcclusionMode IPLDirectOcclusionMode))

(cl:export 'IPLDirectSoundEffectOptions)

(cl:export 'applyDistanceAttenuation)

(cl:export 'applyAirAbsorption)

(cl:export 'applyDirectivity)

(cl:export 'directOcclusionMode)

(cffi:defcfun ("iplCreateDirectSoundEffect" iplCreateDirectSoundEffect) IPLerror
  (renderer :pointer)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateDirectSoundEffect)

(cffi:defcfun ("iplDestroyDirectSoundEffect" iplDestroyDirectSoundEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyDirectSoundEffect)

(cffi:defcfun ("iplApplyDirectSoundEffect" iplApplyDirectSoundEffect) :void
  (effect :pointer)
  (inputAudio IPLAudioBuffer)
  (directSoundPath IPLDirectSoundPath)
  (options IPLDirectSoundEffectOptions)
  (outputAudio IPLAudioBuffer))

(cl:export 'iplApplyDirectSoundEffect)

(cffi:defcfun ("iplFlushDirectSoundEffect" iplFlushDirectSoundEffect) :void
  (effect :pointer))

(cl:export 'iplFlushDirectSoundEffect)

(cffi:defcenum IPLBakedDataType
  :ipl-bakeddatatype-staticsource
  :ipl-bakeddatatype-staticlistener
  :ipl-bakeddatatype-reverb)

(cl:export 'IPLBakedDataType)

(cffi:defcstruct IPLBakedDataIdentifier
    (identifier :int)
  (type IPLBakedDataType))

(cl:export 'IPLBakedDataIdentifier)

(cl:export 'identifier)

(cl:export 'type)

(cffi:defcfun ("iplCreateConvolutionEffect" iplCreateConvolutionEffect) IPLerror
  (renderer :pointer)
  (identifier IPLBakedDataIdentifier)
  (simulationType IPLSimulationType)
  (inputFormat IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect :pointer))

(cl:export 'iplCreateConvolutionEffect)

(cffi:defcfun ("iplDestroyConvolutionEffect" iplDestroyConvolutionEffect) :void
  (effect :pointer))

(cl:export 'iplDestroyConvolutionEffect)

(cffi:defcfun ("iplSetConvolutionEffectIdentifier" iplSetConvolutionEffectIdentifier) :void
  (effect :pointer)
  (identifier IPLBakedDataIdentifier))

(cl:export 'iplSetConvolutionEffectIdentifier)

(cffi:defcfun ("iplSetDryAudioForConvolutionEffect" iplSetDryAudioForConvolutionEffect) :void
  (effect :pointer)
  (source IPLSource)
  (dryAudio IPLAudioBuffer))

(cl:export 'iplSetDryAudioForConvolutionEffect)

(cffi:defcfun ("iplGetWetAudioForConvolutionEffect" iplGetWetAudioForConvolutionEffect) :void
  (effect :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead IPLVector3)
  (listenerUp IPLVector3)
  (wetAudio IPLAudioBuffer))

(cl:export 'iplGetWetAudioForConvolutionEffect)

(cffi:defcfun ("iplGetMixedEnvironmentalAudio" iplGetMixedEnvironmentalAudio) :void
  (renderer :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead IPLVector3)
  (listenerUp IPLVector3)
  (mixedWetAudio IPLAudioBuffer))

(cl:export 'iplGetMixedEnvironmentalAudio)

(cffi:defcfun ("iplFlushConvolutionEffect" iplFlushConvolutionEffect) :void
  (effect :pointer))

(cl:export 'iplFlushConvolutionEffect)

(cffi:defcenum IPLProbePlacement
  :ipl-placement-centroid
  :ipl-placement-octree
  :ipl-placement-uniformfloor)

(cl:export 'IPLProbePlacement)

(cffi:defcstruct IPLProbePlacementParams
    (placement IPLProbePlacement)
  (spacing :float)
  (heightAboveFloor :float)
  (maxOctreeTriangles :int)
  (maxOctreeDepth :int))

(cl:export 'IPLProbePlacementParams)

(cl:export 'placement)

(cl:export 'spacing)

(cl:export 'heightAboveFloor)

(cl:export 'maxOctreeTriangles)

(cl:export 'maxOctreeDepth)

(cffi:defcfun ("iplCreateProbeBox" iplCreateProbeBox) IPLerror
  (context :pointer)
  (scene :pointer)
  (boxLocalToWorldTransform :pointer)
  (placementParams IPLProbePlacementParams)
  (progressCallback :pointer)
  (probeBox :pointer))

(cl:export 'iplCreateProbeBox)

(cffi:defcfun ("iplDestroyProbeBox" iplDestroyProbeBox) :void
  (probeBox :pointer))

(cl:export 'iplDestroyProbeBox)

(cffi:defcfun ("iplGetProbeSpheres" iplGetProbeSpheres) :int
  (probeBox :pointer)
  (probeSpheres :pointer))

(cl:export 'iplGetProbeSpheres)

(cffi:defcfun ("iplSaveProbeBox" iplSaveProbeBox) :int
  (probeBox :pointer)
  (data :pointer))

(cl:export 'iplSaveProbeBox)

(cffi:defcfun ("iplLoadProbeBox" iplLoadProbeBox) IPLerror
  (context :pointer)
  (data :pointer)
  (size :int)
  (probeBox :pointer))

(cl:export 'iplLoadProbeBox)

(cffi:defcfun ("iplCreateProbeBatch" iplCreateProbeBatch) IPLerror
  (context :pointer)
  (probeBatch :pointer))

(cl:export 'iplCreateProbeBatch)

(cffi:defcfun ("iplDestroyProbeBatch" iplDestroyProbeBatch) :void
  (probeBatch :pointer))

(cl:export 'iplDestroyProbeBatch)

(cffi:defcfun ("iplAddProbeToBatch" iplAddProbeToBatch) :void
  (probeBatch :pointer)
  (probeBox :pointer)
  (probeIndex :int))

(cl:export 'iplAddProbeToBatch)

(cffi:defcfun ("iplFinalizeProbeBatch" iplFinalizeProbeBatch) :void
  (probeBatch :pointer))

(cl:export 'iplFinalizeProbeBatch)

(cffi:defcfun ("iplSaveProbeBatch" iplSaveProbeBatch) :int
  (probeBatch :pointer)
  (data :pointer))

(cl:export 'iplSaveProbeBatch)

(cffi:defcfun ("iplLoadProbeBatch" iplLoadProbeBatch) IPLerror
  (context :pointer)
  (data :pointer)
  (size :int)
  (probeBatch :pointer))

(cl:export 'iplLoadProbeBatch)

(cffi:defcfun ("iplCreateProbeManager" iplCreateProbeManager) IPLerror
  (context :pointer)
  (probeManager :pointer))

(cl:export 'iplCreateProbeManager)

(cffi:defcfun ("iplDestroyProbeManager" iplDestroyProbeManager) :void
  (probeManager :pointer))

(cl:export 'iplDestroyProbeManager)

(cffi:defcfun ("iplAddProbeBatch" iplAddProbeBatch) :void
  (probeManager :pointer)
  (probeBatch :pointer))

(cl:export 'iplAddProbeBatch)

(cffi:defcfun ("iplRemoveProbeBatch" iplRemoveProbeBatch) :void
  (probeManager :pointer)
  (probeBatch :pointer))

(cl:export 'iplRemoveProbeBatch)

(cffi:defcstruct IPLBakingSettings
    (bakeParametric IPLbool)
  (bakeConvolution IPLbool))

(cl:export 'IPLBakingSettings)

(cl:export 'bakeParametric)

(cl:export 'bakeConvolution)

(cffi:defcfun ("iplBakeReverb" iplBakeReverb) :void
  (environment :pointer)
  (probeBox :pointer)
  (bakingSettings IPLBakingSettings)
  (progressCallback :pointer))

(cl:export 'iplBakeReverb)

(cffi:defcfun ("iplBakePropagation" iplBakePropagation) :void
  (environment :pointer)
  (probeBox :pointer)
  (sourceInfluence IPLSphere)
  (sourceIdentifier IPLBakedDataIdentifier)
  (bakingSettings IPLBakingSettings)
  (progressCallback :pointer))

(cl:export 'iplBakePropagation)

(cffi:defcfun ("iplBakeStaticListener" iplBakeStaticListener) :void
  (environment :pointer)
  (probeBox :pointer)
  (listenerInfluence IPLSphere)
  (listenerIdentifier IPLBakedDataIdentifier)
  (bakingSettings IPLBakingSettings)
  (progressCallback :pointer))

(cl:export 'iplBakeStaticListener)

(cffi:defcfun ("iplCancelBake" iplCancelBake) :void)

(cl:export 'iplCancelBake)

(cffi:defcfun ("iplDeleteBakedDataByIdentifier" iplDeleteBakedDataByIdentifier) :void
  (probeBox :pointer)
  (identifier IPLBakedDataIdentifier))

(cl:export 'iplDeleteBakedDataByIdentifier)

(cffi:defcfun ("iplGetBakedDataSizeByIdentifier" iplGetBakedDataSizeByIdentifier) :int
  (probeBox :pointer)
  (identifier IPLBakedDataIdentifier))

(cl:export 'iplGetBakedDataSizeByIdentifier)


