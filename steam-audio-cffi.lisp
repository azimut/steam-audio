;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cffi:define-foreign-library phonon
  (:unix "libphonon.so")
  (:darwin "libphonon.dylib")
  (:cygwin "phonon.dll")
  (t (:default "libphonon")))
(cffi:use-foreign-library phonon)
(cl:in-package :steam-audio/raw)

(alexandria:define-constant +STEAMAUDIO_VERSION_MAJOR+ 2)
(alexandria:define-constant +STEAMAUDIO_VERSION_MINOR+ 0)
(alexandria:define-constant +STEAMAUDIO_VERSION_PATCH+ 18)

(cffi:defcenum IPLbool
  :IPL_FALSE
  :IPL_TRUE)

(cffi:defcenum IPLerror
  :IPL_STATUS_SUCCESS
  :IPL_STATUS_FAILURE
  :IPL_STATUS_OUTOFMEMORY
  :IPL_STATUS_INITIALIZATION)

(cffi:defcfun ("iplCreateContext" ipl-create-context) IPLerror
  (logCallback      :pointer)
  (allocateCallback :pointer)
  (freeCallback     :pointer)
  (context          :pointer))

(cffi:defcfun ("iplDestroyContext" ipl-destroy-context) :void
  (context :pointer))

(cffi:defcfun ("iplCleanup" ipl-cleanup) :void)

(cffi:defcstruct IPLVector3
  (x :float)
  (y :float)
  (z :float))

(cffi:defcstruct IPLBox
  (minCoordinates IPLVector3)
  (maxCoordinates IPLVector3))

(cffi:defcstruct IPLSphere
  (center IPLVector3)
  (radius :float))

(cffi:defcfun ("iplCalculateRelativeDirection" ipl-calculate-relative-direction) IPLVector3
  (sourcePosition   IPLVector3)
  (listenerPosition IPLVector3)
  (listenerAhead    IPLVector3)
  (listenerUp       IPLVector3))

(cffi:defcenum IPLComputeDeviceType
  :IPL_COMPUTEDEVICE_CPU
  :IPL_COMPUTEDEVICE_GPU
  :IPL_COMPUTEDEVICE_ANY)

(cffi:defcstruct IPLComputeDeviceFilter
  (type                   IPLComputeDeviceType)
  (maxCUsToReserve        :int)
  (fractionCUsForIRUpdate :float))

(cffi:defcfun ("iplCreateComputeDevice" ipl-create-compute-device) IPLerror
  (context      :pointer)
  (deviceFilter IPLComputeDeviceFilter)
  (device       :pointer))

(cffi:defcfun ("iplDestroyComputeDevice" ipl-destroy-compute-device) :void
  (device :pointer))

(cffi:defcenum IPLSceneType
  :IPL_SCENETYPE_PHONON
  :IPL_SCENETYPE_EMBREE
  :IPL_SCENETYPE_RADEONRAYS
  :IPL_SCENETYPE_CUSTOM)

(cffi:defcenum IPLSimulationType
  :IPL_SIMTYPE_REALTIME
  :IPL_SIMTYPE_BAKED)

(cffi:defcstruct IPLSimulationSettings
  (sceneType              IPLSceneType)
  (maxNumOcclusionSamples :int)
  (numRays                :int)
  (numDiffuseSamples      :int)
  (numBounces             :int)
  (numThreads             :int)
  (irDuration             :float)
  (ambisonicsOrder        :int)
  (maxConvolutionSources  :int)
  (bakingBatchSize        :int)
  (irradianceMinDistance  :float))

(cffi:defcstruct IPLTriangle
  (indices :int :count 3))

(cffi:defcstruct IPLMaterial
  (lowFreqAbsorption    :float)
  (midFreqAbsorption    :float)
  (highFreqAbsorption   :float)
  (scattering           :float)
  (lowFreqTransmission  :float)
  (midFreqTransmission  :float)
  (highFreqTransmission :float))

(cffi:defcfun ("iplCreateScene" ipl-create-scene) IPLerror
  (context                   :pointer)
  (computeDevice             :pointer)
  (sceneType                 IPLSceneType)
  (numMaterials              :int)
  (materials                 :pointer);; FIXME
  (closestHitCallback        :pointer)
  (anyHitCallback            :pointer)
  (batchedClosestHitCallback :pointer)
  (batchedAnyHitCallback     :pointer)
  (userData                  :pointer)
  (scene                     :pointer))

(cffi:defcfun ("iplDestroyScene" ipl-destroy-scene) :void
  (scene :pointer))

(cffi:defcfun ("iplCreateStaticMesh" ipl-create-static-mesh) IPLerror
  (scene           :pointer)
  (numVertices     :int)
  (numTriangles    :int)
  (vertices        (:pointer (:struct iplvector3)))
  (triangles       (:pointer (:struct ipltriangle)))
  (materialIndices (:pointer :int))
  (staticMesh      :pointer))

(cffi:defcfun ("iplDestroyStaticMesh" ipl-destroy-static-mesh) :void
  (staticMesh :pointer))

(cffi:defcfun ("iplSaveScene" ipl-save-scene) :int
  (scene :pointer)
  (data  :pointer))

(cffi:defcfun ("iplLoadScene" ipl-load-scene) IPLerror
  (context          :pointer)
  (sceneType        IPLSceneType)
  (data             :pointer)
  (size             :int)
  (computeDevice    :pointer)
  (progressCallback :pointer)
  (scene            :pointer))

(cffi:defcfun ("iplSaveSceneAsObj" ipl-save-scene-as-obj) :void
  (scene        :pointer)
  (fileBaseName :string))

(cffi:defcstruct IPLMatrix4x4
  (elements :pointer))

(cffi:defcfun ("iplCreateInstancedMesh" ipl-create-instanced-mesh) IPLerror
  (scene          :pointer)
  (instancedScene :pointer)
  (transform      IPLMatrix4x4)
  (instancedMesh  :pointer))

(cffi:defcfun ("iplDestroyInstancedMesh" ipl-destroy-instanced-mesh) :void
  (instancedMesh :pointer))

(cffi:defcfun ("iplAddInstancedMesh" ipl-add-instanced-mesh) :void
  (scene         :pointer)
  (instancedMesh :pointer))

(cffi:defcfun ("iplRemoveInstancedMesh" ipl-remove-instanced-mesh) :void
  (scene         :pointer)
  (instancedMesh :pointer))

(cffi:defcfun ("iplUpdateInstancedMeshTransform" ipl-update-instanced-mesh-transform) :void
  (instancedMesh :pointer)
  (transform     IPLMatrix4x4))

(cffi:defcfun ("iplCommitScene" ipl-commit-scene) :void
  (scene :pointer))

(cffi:defcfun ("iplCreateEnvironment" ipl-create-environment) IPLerror
  (context            :pointer)
  (computeDevice      :pointer)
  (simulationSettings IPLSimulationSettings)
  (scene              :pointer)
  (probeManager       :pointer)
  (environment        :pointer))

(cffi:defcfun ("iplDestroyEnvironment" ipl-destroy-environment) :void
  (environment :pointer))

(cffi:defcfun ("iplSetNumBounces" ipl-set-num-bounces) :void
  (environment :pointer)
  (numBounces  :int))

(cffi:defcenum IPLConvolutionType
  :IPL_CONVOLUTIONTYPE_PHONON
  :IPL_CONVOLUTIONTYPE_TRUEAUDIONEXT)

(cffi:defcstruct IPLRenderingSettings
  (samplingRate    :int)
  (frameSize       :int)
  (convolutionType IPLConvolutionType))

(cffi:defcenum IPLChannelLayoutType
  :IPL_CHANNELLAYOUTTYPE_SPEAKERS
  :IPL_CHANNELLAYOUTTYPE_AMBISONICS)

(cffi:defcenum IPLChannelLayout
  :IPL_CHANNELLAYOUT_MONO
  :IPL_CHANNELLAYOUT_STEREO
  :IPL_CHANNELLAYOUT_QUADRAPHONIC
  :IPL_CHANNELLAYOUT_FIVEPOINTONE
  :IPL_CHANNELLAYOUT_SEVENPOINTONE
  :IPL_CHANNELLAYOUT_CUSTOM)

(cffi:defcenum IPLAmbisonicsOrdering
  :IPL_AMBISONICSORDERING_FURSEMALHAM
  :IPL_AMBISONICSORDERING_ACN)

(cffi:defcenum IPLAmbisonicsNormalization
  :IPL_AMBISONICSNORMALIZATION_FURSEMALHAM
  :IPL_AMBISONICSNORMALIZATION_SN3D
  :IPL_AMBISONICSNORMALIZATION_N3D)

(cffi:defcenum IPLChannelOrder
  :IPL_CHANNELORDER_INTERLEAVED
  :IPL_CHANNELORDER_DEINTERLEAVED)

(cffi:defcstruct IPLAudioFormat
  (channelLayoutType       IPLChannelLayoutType)
  (channelLayout           IPLChannelLayout)
  (numSpeakers             :int)
  (speakerDirections       :pointer)
  (ambisonicsOrder         :int)
  (ambisonicsOrdering      IPLAmbisonicsOrdering)
  (ambisonicsNormalization IPLAmbisonicsNormalization)
  (channelOrder            IPLChannelOrder))

(cffi:defcstruct IPLAudioBuffer
  (format              IPLAudioFormat)
  (numSamples          :int)
  (interleavedBuffer   :pointer)
  (deinterleavedBuffer :pointer))

(cffi:defcfun ("iplMixAudioBuffers" ipl-mix-audio-buffers) :void
  (numBuffers  :int)
  (inputAudio  :pointer)
  (outputAudio IPLAudioBuffer))

(cffi:defcfun ("iplInterleaveAudioBuffer" ipl-interleave-audio-buffer) :void
  (inputAudio  IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cffi:defcfun ("iplDeinterleaveAudioBuffer" ipl-deinterleave-audio-buffer) :void
  (inputAudio  IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cffi:defcfun ("iplConvertAudioBufferFormat" ipl-convert-audio-buffer-format) :void
  (inputAudio  IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cffi:defcfun ("iplCreateAmbisonicsRotator" ipl-create-ambisonics-rotator) IPLerror
  (context :pointer)
  (order   :int)
  (rotator :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsRotator" ipl-destroy-ambisonics-rotator) :void
  (rotator :pointer))

(cffi:defcfun ("iplSetAmbisonicsRotation" ipl-set-ambisonics-rotation) :void
  (rotator       :pointer)
  (listenerAhead IPLVector3)
  (listenerUp    IPLVector3))

(cffi:defcfun ("iplRotateAmbisonicsAudioBuffer" ipl-rotate-ambisonics-audio-buffer) :void
  (rotator     :pointer)
  (inputAudio  IPLAudioBuffer)
  (outputAudio IPLAudioBuffer))

(cffi:defcenum IPLHrtfDatabaseType
  :IPL_HRTFDATABASETYPE_DEFAULT
  :IPL_HRTFDATABASETYPE_SOFA)

(cffi:defcstruct IPLHrtfParams
  (type         IPLHrtfDatabaseType)
  (hrtfData     :pointer)
  (sofaFileName :string))

(cffi:defcfun ("iplCreateBinauralRenderer" ipl-create-binaural-renderer) IPLerror
  (context           :pointer)
  (renderingSettings IPLRenderingSettings)
  (params            IPLHrtfParams)
  (renderer          :pointer))

(cffi:defcfun ("iplDestroyBinauralRenderer" ipl-destroy-binaural-renderer) :void
  (renderer :pointer))

(cffi:defcfun ("iplCreatePanningEffect" ipl-create-panning-effect) IPLerror
  (renderer     :pointer)
  (inputFormat  IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect       :pointer))

(cffi:defcfun ("iplDestroyPanningEffect" ipl-destroy-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyPanningEffect" ipl-apply-panning-effect) :void
  (effect           :pointer)
  (binauralRenderer :pointer)
  (inputAudio       IPLAudioBuffer)
  (direction        IPLVector3)
  (outputAudio      IPLAudioBuffer))

(cffi:defcfun ("iplFlushPanningEffect" ipl-flush-panning-effect) :void
  (effect :pointer))

(cffi:defcenum IPLHrtfInterpolation
  :IPL_HRTFINTERPOLATION_NEAREST
  :IPL_HRTFINTERPOLATION_BILINEAR)

(cffi:defcfun ("iplCreateBinauralEffect" ipl-create-binaural-effect) IPLerror
  (renderer     :pointer)
  (inputFormat  IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect       :pointer))

(cffi:defcfun ("iplDestroyBinauralEffect" ipl-destroy-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyBinauralEffect" ipl-apply-binaural-effect) :void
  (effect           :pointer)
  (binauralRenderer :pointer)
  (inputAudio       IPLAudioBuffer)
  (direction        IPLVector3)
  (interpolation    IPLHrtfInterpolation)
  (spatialBlend     :float)
  (outputAudio      IPLAudioBuffer))

(cffi:defcfun ("iplApplyBinauralEffectWithParameters" ipl-apply-binaural-effect-with-parameters) :void
  (effect             :pointer)
  (binauralRenderer   :pointer)
  (inputAudio         IPLAudioBuffer)
  (direction          IPLVector3)
  (interpolation      IPLHrtfInterpolation)
  (enableSpatialBlend IPLbool)
  (spatialBlend       :float)
  (outputAudio        IPLAudioBuffer)
  (leftDelay          :pointer)
  (rightDelay         :pointer))

(cffi:defcfun ("iplFlushBinauralEffect" ipl-flush-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateVirtualSurroundEffect" ipl-create-virtual-surround-effect) IPLerror
  (renderer     :pointer)
  (inputFormat  IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect       :pointer))

(cffi:defcfun ("iplDestroyVirtualSurroundEffect" ipl-destroy-virtual-surround-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyVirtualSurroundEffect" ipl-apply-virtual-surround-effect) :void
  (effect           :pointer)
  (binauralRenderer :pointer)
  (inputAudio       IPLAudioBuffer)
  (outputAudio      IPLAudioBuffer))

(cffi:defcfun ("iplFlushVirtualSurroundEffect" ipl-flush-virtual-surround-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateAmbisonicsPanningEffect" ipl-create-ambisonics-panning-effect) IPLerror
  (renderer     :pointer)
  (inputFormat  IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect       :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsPanningEffect" ipl-destroy-ambisonics-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyAmbisonicsPanningEffect" ipl-apply-ambisonics-panning-effect) :void
  (effect           :pointer)
  (binauralRenderer :pointer)
  (inputAudio       IPLAudioBuffer)
  (outputAudio      IPLAudioBuffer))

(cffi:defcfun ("iplFlushAmbisonicsPanningEffect" ipl-flush-ambisonics-panning-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateAmbisonicsBinauralEffect" ipl-create-ambisonics-binaural-effect) IPLerror
  (renderer     :pointer)
  (inputFormat  IPLAudioFormat)
  (outputFormat IPLAudioFormat)
  (effect       :pointer))

(cffi:defcfun ("iplDestroyAmbisonicsBinauralEffect" ipl-destroy-ambisonics-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyAmbisonicsBinauralEffect" ipl-apply-ambisonics-binaural-effect) :void
  (effect           :pointer)
  (binauralRenderer :pointer)
  (inputAudio       IPLAudioBuffer)
  (outputAudio      IPLAudioBuffer))

(cffi:defcfun ("iplFlushAmbisonicsBinauralEffect" ipl-flush-ambisonics-binaural-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplCreateEnvironmentalRenderer" ipl-create-environmental-renderer) IPLerror
  (context               :pointer)
  (environment           :pointer)
  (renderingSettings     IPLRenderingSettings)
  (outputFormat          IPLAudioFormat)
  (threadCreateCallback  :pointer)
  (threadDestroyCallback :pointer)
  (renderer              :pointer))

(cffi:defcfun ("iplDestroyEnvironmentalRenderer" ipl-destroy-environmental-renderer) :void
  (renderer :pointer))

(cffi:defcfun ("iplGetEnvironmentForRenderer" ipl-get-environment-for-renderer) :pointer
  (renderer :pointer))

(cffi:defcenum IPLDistanceAttenuationModelType
  :IPL_DISTANCEATTENUATION_DEFAULT
  :IPL_DISTANCEATTENUATION_INVERSEDISTANCE
  :IPL_DISTANCEATTENUATION_CALLBACK)

(cffi:defcstruct IPLDistanceAttenuationModel
  (type        IPLDistanceAttenuationModelType)
  (minDistance :float)
  (callback    :pointer)
  (userData    :pointer)
  (dirty       IPLbool))

(cffi:defcenum IPLAirAbsorptionModelType
  :IPL_AIRABSORPTION_DEFAULT
  :IPL_AIRABSORPTION_EXPONENTIAL
  :IPL_AIRABSORPTION_CALLBACK)

(cffi:defcstruct IPLAirAbsorptionModel
  (type         IPLAirAbsorptionModelType)
  (coefficients :float :count 3)
  (callback     :pointer)
  (userData     :pointer)
  (dirty        IPLbool))

(cffi:defcenum IPLDirectOcclusionMethod
  :IPL_DIRECTOCCLUSION_RAYCAST
  :IPL_DIRECTOCCLUSION_VOLUMETRIC)

(cffi:defcenum IPLDirectOcclusionMode
  :IPL_DIRECTOCCLUSION_NONE
  :IPL_DIRECTOCCLUSION_NOTRANSMISSION
  :IPL_DIRECTOCCLUSION_TRANSMISSIONBYVOLUME
  :IPL_DIRECTOCCLUSION_TRANSMISSIONBYFREQUENCY)

(cffi:defcstruct IPLDirectSoundPath
  (direction           IPLVector3)
  (distanceAttenuation :float)
  (airAbsorption       :pointer   :count 3)
  (propagationDelay    :float)
  (occlusionFactor     :float)
  (transmissionFactor  :pointer   :count 3)
  (directivityFactor   :float))

(cffi:defcstruct IPLDirectivity
  (dipoleWeight :float)
  (dipolePower  :float)
  (callback     :pointer)
  (userData     :pointer))

(cffi:defcstruct IPLSource
  (position                 (:struct IPLVector3))
  (ahead                    (:struct IPLVector3))
  (up                       (:struct IPLVector3))
  (right                    (:struct IPLVector3))
  (directivity              (:struct IPLDirectivity))
  (distanceAttenuationModel (:struct IPLDistanceAttenuationModel))
  (airAbsorptionModel       (:struct IPLAirAbsorptionModel)))

(cffi:defcfun ("iplGetDirectSoundPath" ipl-get-direct-sound-path) IPLDirectSoundPath
  (environment      :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead    IPLVector3)
  (listenerUp       IPLVector3)
  (source           IPLSource)
  (sourceRadius     :float)
  (numSamples       :int)
  (occlusionMode    IPLDirectOcclusionMode)
  (occlusionMethod  IPLDirectOcclusionMethod))

(cffi:defcstruct IPLDirectSoundEffectOptions
  (applyDistanceAttenuation IPLbool)
  (applyAirAbsorption       IPLbool)
  (applyDirectivity         IPLbool)
  (directOcclusionMode      IPLDirectOcclusionMode))

(cffi:defcfun ("iplCreateDirectSoundEffect" ipl-create-direct-sound-effect) IPLerror
  (inputFormat       IPLAudioFormat)
  (outputFormat      IPLAudioFormat)
  (renderingSettings IPLRenderingSettings)
  (effect            :pointer))

(cffi:defcfun ("iplDestroyDirectSoundEffect" ipl-destroy-direct-sound-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplApplyDirectSoundEffect" ipl-apply-direct-sound-effect) :void
  (effect          :pointer)
  (inputAudio      IPLAudioBuffer)
  (directSoundPath IPLDirectSoundPath)
  (options         IPLDirectSoundEffectOptions)
  (outputAudio     IPLAudioBuffer))

(cffi:defcfun ("iplFlushDirectSoundEffect" ipl-flush-direct-sound-effect) :void
  (effect :pointer))

(cffi:defcenum IPLBakedDataType
  :IPL_BAKEDDATATYPE_STATICSOURCE
  :IPL_BAKEDDATATYPE_STATICLISTENER
  :IPL_BAKEDDATATYPE_REVERB)

(cffi:defcstruct IPLBakedDataIdentifier
  (identifier :int)
  (type       IPLBakedDataType))

(cffi:defcfun ("iplCreateConvolutionEffect" ipl-create-convolution-effect) IPLerror
  (renderer       :pointer)
  (identifier     IPLBakedDataIdentifier)
  (simulationType IPLSimulationType)
  (inputFormat    IPLAudioFormat)
  (outputFormat   IPLAudioFormat)
  (effect         :pointer))

(cffi:defcfun ("iplDestroyConvolutionEffect" ipl-destroy-convolution-effect) :void
  (effect :pointer))

(cffi:defcfun ("iplSetConvolutionEffectIdentifier" ipl-set-convolution-effect-identifier) :void
  (effect     :pointer)
  (identifier IPLBakedDataIdentifier))

(cffi:defcfun ("iplSetDryAudioForConvolutionEffect" ipl-set-dry-audio-for-convolution-effect) :void
  (effect   :pointer)
  (source   IPLSource)
  (dryAudio IPLAudioBuffer))

(cffi:defcfun ("iplGetWetAudioForConvolutionEffect" ipl-get-wet-audio-for-convolution-effect) :void
  (effect           :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead    IPLVector3)
  (listenerUp       IPLVector3)
  (wetAudio         IPLAudioBuffer))

(cffi:defcfun ("iplGetMixedEnvironmentalAudio" ipl-get-mixed-environmental-audio) :void
  (renderer         :pointer)
  (listenerPosition IPLVector3)
  (listenerAhead    IPLVector3)
  (listenerUp       IPLVector3)
  (mixedWetAudio    IPLAudioBuffer))

(cffi:defcfun ("iplFlushConvolutionEffect" ipl-flush-convolution-effect) :void
  (effect :pointer))

(cffi:defcenum IPLProbePlacement
  :IPL_PLACEMENT_CENTROID
  :IPL_PLACEMENT_OCTREE
  :IPL_PLACEMENT_UNIFORMFLOOR)

(cffi:defcstruct IPLProbePlacementParams
  (placement          IPLProbePlacement)
  (spacing            :float)
  (heightAboveFloor   :float)
  (maxOctreeTriangles :int)
  (maxOctreeDepth     :int))

(cffi:defcfun ("iplCreateProbeBox" ipl-create-probe-box) IPLerror
  (context                  :pointer)
  (scene                    :pointer)
  (boxLocalToWorldTransform :pointer)
  (placementParams          IPLProbePlacementParams)
  (progressCallback         :pointer)
  (probeBox                 :pointer))

(cffi:defcfun ("iplDestroyProbeBox" ipl-destroy-probe-box) :void
  (probeBox :pointer))

(cffi:defcfun ("iplGetProbeSpheres" ipl-get-probe-spheres) :int
  (probeBox     :pointer)
  (probeSpheres :pointer))

(cffi:defcfun ("iplSaveProbeBox" ipl-save-probe-box) :int
  (probeBox :pointer)
  (data     :pointer))

(cffi:defcfun ("iplLoadProbeBox" ipl-load-probe-box) IPLerror
  (context  :pointer)
  (data     :pointer)
  (size     :int)
  (probeBox :pointer))

(cffi:defcfun ("iplCreateProbeBatch" ipl-create-probe-batch) IPLerror
  (context    :pointer)
  (probeBatch :pointer))

(cffi:defcfun ("iplDestroyProbeBatch" ipl-destroy-probe-batch) :void
  (probeBatch :pointer))

(cffi:defcfun ("iplAddProbeToBatch" ipl-add-probe-to-batch) :void
  (probeBatch :pointer)
  (probeBox   :pointer)
  (probeIndex :int))

(cffi:defcfun ("iplFinalizeProbeBatch" ipl-finalize-probe-batch) :void
  (probeBatch :pointer))

(cffi:defcfun ("iplSaveProbeBatch" ipl-save-probe-batch) :int
  (probeBatch :pointer)
  (data       :pointer))

(cffi:defcfun ("iplLoadProbeBatch" ipl-load-probe-batch) IPLerror
  (context    :pointer)
  (data       :pointer)
  (size       :int)
  (probeBatch :pointer))

(cffi:defcfun ("iplCreateProbeManager" ipl-create-probe-manager) IPLerror
  (context      :pointer)
  (probeManager :pointer))

(cffi:defcfun ("iplDestroyProbeManager" ipl-destroy-probe-manager) :void
  (probeManager :pointer))

(cffi:defcfun ("iplAddProbeBatch" ipl-add-probe-batch) :void
  (probeManager :pointer)
  (probeBatch   :pointer))

(cffi:defcfun ("iplRemoveProbeBatch" ipl-remove-probe-batch) :void
  (probeManager :pointer)
  (probeBatch   :pointer))

(cffi:defcstruct IPLBakingSettings
  (bakeParametric    IPLbool)
  (bakeConvolution   IPLbool)
  (irDurationForBake :float))

(cffi:defcfun ("iplBakeReverb" ipl-bake-reverb) :void
  (environment      :pointer)
  (probeBox         :pointer)
  (bakingSettings   IPLBakingSettings)
  (progressCallback :pointer))

(cffi:defcfun ("iplBakePropagation" ipl-bake-propagation) :void
  (environment      :pointer)
  (probeBox         :pointer)
  (sourceInfluence  IPLSphere)
  (sourceIdentifier IPLBakedDataIdentifier)
  (bakingSettings   IPLBakingSettings)
  (progressCallback :pointer))

(cffi:defcfun ("iplBakeStaticListener" ipl-bake-static-listener) :void
  (environment        :pointer)
  (probeBox           :pointer)
  (listenerInfluence  IPLSphere)
  (listenerIdentifier IPLBakedDataIdentifier)
  (bakingSettings     IPLBakingSettings)
  (progressCallback   :pointer))

(cffi:defcfun ("iplCancelBake" ipl-cancel-bake) :void)

(cffi:defcfun ("iplDeleteBakedDataByIdentifier" ipl-delete-baked-data-by-identifier) :void
  (probeBox   :pointer)
  (identifier IPLBakedDataIdentifier))

(cffi:defcfun ("iplGetBakedDataSizeByIdentifier" ipl-get-baked-data-size-by-identifier) :int
  (probeBox   :pointer)
  (identifier IPLBakedDataIdentifier))


